const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

// Importar todos os modelos
const Usuario = require('./backend/models/Usuario');
const Cliente = require('./backend/models/Cliente');
const Produto = require('./backend/models/Produto');
const NFe = require('./backend/models/NFe');

async function limparSistemaCompleto() {
    try {
        console.log('üî• INICIANDO LIMPEZA COMPLETA DO SISTEMA...');
        console.log('');

        // Conectar ao MongoDB
        await mongoose.connect('mongodb://localhost:27017/brandaocontador-nfe', {
            useNewUrlParser: true,
            useUnifiedTopology: true
        });
        console.log('‚úÖ Conectado ao MongoDB');

        // 1. DELETAR TODAS AS COLE√á√ïES
        console.log('');
        console.log('üóëÔ∏è  DELETANDO TODAS AS INFORMA√á√ïES...');
        
        // Deletar todos os usu√°rios
        const usuariosRemovidos = await Usuario.deleteMany({});
        console.log(`   ‚ùå Usu√°rios removidos: ${usuariosRemovidos.deletedCount}`);

        // Deletar todos os clientes
        const clientesRemovidos = await Cliente.deleteMany({});
        console.log(`   ‚ùå Clientes removidos: ${clientesRemovidos.deletedCount}`);

        // Deletar todos os produtos
        const produtosRemovidos = await Produto.deleteMany({});
        console.log(`   ‚ùå Produtos removidos: ${produtosRemovidos.deletedCount}`);

        // Deletar todas as NFes
        const nfesRemovidas = await NFe.deleteMany({});
        console.log(`   ‚ùå NFes removidas: ${nfesRemovidas.deletedCount}`);

        // Limpar outras cole√ß√µes que possam existir
        const collections = await mongoose.connection.db.listCollections().toArray();
        for (const collection of collections) {
            if (!['usuarios', 'clientes', 'produtos', 'nfes'].includes(collection.name)) {
                await mongoose.connection.db.collection(collection.name).deleteMany({});
                console.log(`   ‚ùå Cole√ß√£o '${collection.name}' limpa`);
            }
        }

        console.log('');
        console.log('‚úÖ SISTEMA COMPLETAMENTE LIMPO!');

        // 2. CRIAR USU√ÅRIO ADMINISTRADOR
        console.log('');
        console.log('üë§ CRIANDO USU√ÅRIO ADMINISTRADOR...');

        const senhaHash = await bcrypt.hash('admin123', 10);
        
        const admin = new Usuario({
            nome: 'Administrador',
            email: 'admin@brandaocontador.com.br',
            senha: senhaHash,
            tipo: 'administrador',
            ativo: true,
            dataCriacao: new Date()
        });

        await admin.save();
        console.log('‚úÖ Usu√°rio administrador criado com sucesso!');
        console.log(`   üìß Email: admin@brandaocontador.com.br`);
        console.log(`   üîë Senha: admin123`);

        // 3. VERIFICAR ESTADO FINAL
        console.log('');
        console.log('üìä VERIFICANDO ESTADO FINAL...');
        
        const totalUsuarios = await Usuario.countDocuments();
        const totalClientes = await Cliente.countDocuments();
        const totalProdutos = await Produto.countDocuments();
        const totalNFes = await NFe.countDocuments();

        console.log(`   üë• Total de usu√°rios: ${totalUsuarios} (deve ser 1 - apenas admin)`);
        console.log(`   üè¢ Total de clientes: ${totalClientes} (deve ser 0)`);
        console.log(`   üì¶ Total de produtos: ${totalProdutos} (deve ser 0)`);
        console.log(`   üìÑ Total de NFes: ${totalNFes} (deve ser 0)`);

        console.log('');
        if (totalUsuarios === 1 && totalClientes === 0 && totalProdutos === 0 && totalNFes === 0) {
            console.log('üéâ SISTEMA LIMPO COM SUCESSO!');
            console.log('‚úÖ Apenas usu√°rio administrador presente');
            console.log('‚úÖ Todas as outras informa√ß√µes foram removidas');
        } else {
            console.log('‚ö†Ô∏è  ATEN√á√ÉO: Verificar se a limpeza foi completa');
        }

        console.log('');
        console.log('üöÄ SISTEMA PRONTO PARA USO!');
        console.log('   Fa√ßa login com: admin@brandaocontador.com.br / admin123');
        console.log('   Agora voc√™ pode cadastrar o cliente corretamente.');

    } catch (error) {
        console.error('‚ùå Erro durante a limpeza:', error);
    } finally {
        await mongoose.disconnect();
        console.log('');
        console.log('üîå Desconectado do MongoDB');
        process.exit(0);
    }
}

// Executar a limpeza
limparSistemaCompleto();