name: Deploy Backend (PM2 + Nginx + SSL)

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch para deploy"
        required: false
        default: "main"

env:
  NODE_VERSION: '20'

jobs:
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies - Backend
        run: |
          cd backend
          npm ci

      - name: Run backend verification script
        run: |
          cd backend
          npm run testar

  deploy-backend:
    needs: test-backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code (for context)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Deploy via SSH (PM2 + Nginx + SSL)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          script: |
            set -e
            
            APP_ROOT=/var/www/brandaocontador-nfe
            APP_NAME=brandaocontador-nfe-backend
            BRANCH=${{ github.event.inputs.branch }}
            REPO=${{ github.repository }}
            API_DOMAIN=${{ secrets.API_DOMAIN || vars.API_DOMAIN }}
            SSL_EMAIL=${{ secrets.SSL_EMAIL || vars.SSL_EMAIL }}
            GIT_TOKEN=${{ secrets.GH_PAT_CHECKOUT || vars.GH_PAT_CHECKOUT }}

            echo "📦 Atualizando sistema e instalando dependências"
            sudo apt-get update -y
            sudo apt-get install -y curl git nginx certbot python3-certbot-nginx

            NODE_VER=$(node -v 2>/dev/null | sed 's/v\([0-9]\+\).*/\1/')
            if [ -z "$NODE_VER" ] || [ "$NODE_VER" -lt 20 ]; then
              echo "Instalando/Atualizando Node.js 20"
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi
            if ! command -v pm2 >/dev/null 2>&1; then
              echo "Instalando PM2"
              sudo npm install -g pm2
            fi

            echo "📂 Preparando diretórios"
            sudo mkdir -p "$APP_ROOT"
            sudo chown -R "$USER":"$USER" "$APP_ROOT"

            if [ -d "$APP_ROOT/.git" ]; then
              echo "🔄 Atualizando repositório"
              cd "$APP_ROOT"
              git fetch origin
              git reset --hard "origin/$BRANCH"
            else
              echo "📥 Clonando repositório"
              if [ -n "$GIT_TOKEN" ]; then
                git clone "https://$GIT_TOKEN@github.com/$REPO.git" "$APP_ROOT"
              else
                git clone "https://github.com/$REPO.git" "$APP_ROOT"
              fi
              cd "$APP_ROOT"
              git checkout "$BRANCH"
            fi

            echo "📦 Instalando dependências do backend"
            cd "$APP_ROOT/backend"
            npm ci --omit=dev --no-audit --no-fund --prefer-offline --silent \
              || npm ci --only=prod --no-audit --no-fund --prefer-offline --silent \
              || npm install --omit=dev --no-audit --no-fund --prefer-offline --silent
            mkdir -p logs xmls/enviadas xmls/falhas

            echo "🔐 Gerando arquivo .env de produção"
            cat > .env << 'EOF'
            NODE_ENV=production
            PORT=3001
            MONGODB_URI=${{ secrets.MONGODB_URI }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            CORS_ORIGINS=${{ secrets.CORS_ORIGINS || vars.CORS_ORIGINS || 'https://brandaocontador.com.br,https://app.brandaocontador.com.br' }}
            UF=${{ secrets.UF || vars.UF || 'MS' }}
            AMBIENTE=${{ secrets.AMBIENTE || vars.AMBIENTE || '2' }}
            CNPJ_EMITENTE=${{ secrets.CNPJ_EMITENTE || vars.CNPJ_EMITENTE || '' }}
            CERT_PATH=${{ secrets.CERT_PATH || vars.CERT_PATH || '' }}
            CERT_PASS=${{ secrets.CERT_PASS || '' }}
            SEED_ADMIN_NOME=${{ secrets.SEED_ADMIN_NOME || vars.SEED_ADMIN_NOME || 'Administrador' }}
            SEED_ADMIN_EMAIL=${{ secrets.SEED_ADMIN_EMAIL || vars.SEED_ADMIN_EMAIL || 'admin@brandaocontador.com.br' }}
            SEED_ADMIN_SENHA=${{ secrets.SEED_ADMIN_SENHA || vars.SEED_ADMIN_SENHA || 'admin123' }}
            SIMULATION_MODE=${{ secrets.SIMULATION_MODE || vars.SIMULATION_MODE || 'false' }}
            EOF

            echo "🛑 Reiniciando aplicação com PM2"
            pm2 stop "$APP_NAME" || true
            pm2 delete "$APP_NAME" || true
            pm2 start deploy/ecosystem.production.js --env production
            pm2 save

            echo "🌐 Configurando Nginx (proxy para porta 3001)"
            sudo bash -c "cat > /etc/nginx/sites-available/nfe-backend << 'NGINX'"
            server {
                listen 80;
                server_name ${API_DOMAIN};

                location / {
                    proxy_pass http://localhost:3001;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_connect_timeout 60s;
                    proxy_send_timeout 60s;
                    proxy_read_timeout 60s;
                }

                client_max_body_size 10M;
            }
            NGINX
            sudo ln -sf /etc/nginx/sites-available/nfe-backend /etc/nginx/sites-enabled/nfe-backend
            sudo nginx -t
            sudo systemctl reload nginx

            if [ -n "$SSL_EMAIL" ] && [ -n "$API_DOMAIN" ]; then
              echo "🔒 Configurando SSL com Certbot"
              if [ ! -d "/etc/letsencrypt/live/$API_DOMAIN" ]; then
                sudo certbot --nginx --non-interactive --agree-tos --email "$SSL_EMAIL" -d "$API_DOMAIN" --redirect
              else
                echo "Certificado existente para $API_DOMAIN, pulando emissão"
              fi
            else
              echo "⚠️ Variáveis SSL_EMAIL ou API_DOMAIN não configuradas, pulando SSL"
            fi

      - name: Health Check
        run: |
          sleep 20
          curl -f ${{ secrets.BACKEND_URL || vars.BACKEND_URL }}/health || exit 1