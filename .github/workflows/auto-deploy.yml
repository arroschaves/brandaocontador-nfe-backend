name: Auto Deploy Backend and Frontend

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read
  pages: write
  id-token: write

env:
  NODE_VERSION: '20'

jobs:
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies (backend)
        working-directory: backend
        run: |
          npm ci || npm install

      - name: Run backend basic test script
        working-directory: backend
        run: |
          node scripts/testar-sistema.js || echo "No test script or tests are optional"

  deploy-backend:
    name: Deploy Backend (PM2 + Nginx)
    needs: test-backend
    runs-on: ubuntu-latest
    if: ${{ secrets.DO_HOST != '' && secrets.DO_SSH_KEY != '' && secrets.DO_USERNAME != '' && secrets.MONGODB_URI != '' && secrets.JWT_SECRET != '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.11
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          port: ${{ secrets.DO_PORT || 22 }}
          script: |
            set -e
            echo "[INFO] Starting backend deploy"

            # Ensure prerequisites
            if ! command -v node >/dev/null 2>&1; then
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi
            if ! command -v pm2 >/dev/null 2>&1; then
              sudo npm install -g pm2
            fi
            if ! command -v nginx >/dev/null 2>&1; then
              sudo apt-get update
              sudo apt-get install -y nginx
            fi
            if ! command -v certbot >/dev/null 2>&1; then
              sudo apt-get install -y certbot python3-certbot-nginx || true
            fi

            # Repo path
            REPO_DIR="/var/www/brandaocontador-nfe"
            if [ -d "$REPO_DIR/.git" ]; then
              cd "$REPO_DIR"
              git fetch --all
              git reset --hard origin/main
            else
              sudo mkdir -p "$REPO_DIR"
              sudo chown $USER:$USER "$REPO_DIR"
              git clone https://github.com/${{ github.repository }} "$REPO_DIR"
              cd "$REPO_DIR"
              git checkout main || true
            fi

            # Record deployed commit/branch/time
            cd "$REPO_DIR"
            GIT_SHA=$(git rev-parse HEAD)
            GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
            BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

            cat > backend/deploy-version.json <<JSON
            {
              "commit": "$GIT_SHA",
              "branch": "$GIT_BRANCH",
              "deployedAt": "$BUILD_TIME",
              "repository": "${{ github.repository }}",
              "runId": "${{ github.run_id }}",
              "apiDomain": "${{ secrets.API_DOMAIN || vars.API_DOMAIN || 'api.brandaocontador.com.br' }}"
            }
            JSON

            # Install backend deps (prod-only, resilient)
            cd backend
            npm ci --omit=dev --no-audit --no-fund --prefer-offline --silent \
              || npm ci --only=prod --no-audit --no-fund --prefer-offline --silent \
              || npm install --omit=dev --no-audit --no-fund --prefer-offline --silent

            # Write .env from secrets/vars
            cat > .env <<'EOF'
            NODE_ENV=production
            PORT=${{ secrets.PORT || vars.PORT || 3001 }}
            MONGODB_URI=${{ secrets.MONGODB_URI }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            API_DOMAIN=${{ secrets.API_DOMAIN || vars.API_DOMAIN || 'api.brandaocontador.com.br' }}
            BACKEND_URL=${{ secrets.BACKEND_URL || vars.BACKEND_URL || 'https://api.brandaocontador.com.br' }}
            CORS_ORIGINS=${{ secrets.CORS_ORIGINS || vars.CORS_ORIGINS || 'https://brandaocontador.com.br,https://app.brandaocontador.com.br' }}
            UF=${{ secrets.UF || vars.UF || 'MS' }}
            AMBIENTE=${{ secrets.AMBIENTE || vars.AMBIENTE || '2' }}
            CNPJ_EMITENTE=${{ secrets.CNPJ_EMITENTE || vars.CNPJ_EMITENTE || '' }}
            CERT_PATH=${{ secrets.CERT_PATH || vars.CERT_PATH || '' }}
            CERT_PASS=${{ secrets.CERT_PASS || '' }}
            SIMULATION_MODE=${{ secrets.SIMULATION_MODE || vars.SIMULATION_MODE || 'false' }}
            SEED_ADMIN_NOME=${{ secrets.SEED_ADMIN_NOME || vars.SEED_ADMIN_NOME || 'Administrador' }}
            SEED_ADMIN_EMAIL=${{ secrets.SEED_ADMIN_EMAIL || vars.SEED_ADMIN_EMAIL || 'admin@brandaocontador.com.br' }}
            SEED_ADMIN_SENHA=${{ secrets.SEED_ADMIN_SENHA || vars.SEED_ADMIN_SENHA || 'admin123' }}
            EOF

            # Start/Restart PM2 using ecosystem file (consistent name)
            pm2 delete brandaocontador-nfe-backend || true
            pm2 start deploy/ecosystem.production.js --env production
            pm2 save

            # Configure Nginx reverse proxy
            sudo bash -c 'cat > /etc/nginx/sites-available/nfe <<NGINX
            server {
              listen 80;
              server_name ${{ secrets.API_DOMAIN || vars.API_DOMAIN || 'api.brandaocontador.com.br' }};

              location / {
                proxy_pass http://127.0.0.1:${{ secrets.PORT || vars.PORT || 3001 }};
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
              }

              location /health {
                proxy_pass http://127.0.0.1:${{ secrets.PORT || vars.PORT || 3001 }}/health;
              }
            }
            NGINX'
            sudo ln -sf /etc/nginx/sites-available/nfe /etc/nginx/sites-enabled/nfe
            sudo nginx -t
            sudo systemctl restart nginx

            # Optional SSL
            if [ -n "${{ secrets.SSL_EMAIL }}" ]; then
              sudo certbot --nginx -d ${{ secrets.API_DOMAIN || vars.API_DOMAIN || 'api.brandaocontador.com.br' }} --non-interactive --agree-tos -m ${{ secrets.SSL_EMAIL }} || true
            fi

            # Health check
            curl -fsS http://127.0.0.1:${{ secrets.PORT || vars.PORT || 3001 }}/health || curl -fsS https://${{ secrets.API_DOMAIN || vars.API_DOMAIN || 'api.brandaocontador.com.br' }}/health || true

  build-frontend:
    name: Build Frontend
    needs: test-backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies (frontend)
        working-directory: frontend
        run: |
          npm ci --no-audit --no-fund --prefer-offline --silent || npm install --no-audit --no-fund --prefer-offline --silent

      - name: Build Frontend with Vite and env
        working-directory: frontend
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL || vars.VITE_API_URL || 'https://api.brandaocontador.com.br' }}
          VITE_BASE: ${{ secrets.VITE_BASE || vars.VITE_BASE || '/' }}
        run: |
          echo "Building with VITE_API_URL=$VITE_API_URL VITE_BASE=$VITE_BASE"
          npm run build
          cp dist/index.html dist/404.html

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: frontend/dist

  deploy-pages:
    name: Deploy Frontend to GitHub Pages
    needs: build-frontend
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4