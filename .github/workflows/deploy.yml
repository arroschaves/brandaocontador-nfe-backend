name: Deploy NFe System

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_frontend:
        description: "Deploy frontend para Vercel"
        required: false
        default: "false"
      deploy_backend:
        description: "Deploy backend para DigitalOcean"
        required: false
        default: "false"

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies - Backend
        run: |
          cd backend
          npm ci

      - name: Install dependencies - Frontend
        run: |
          cd frontend
          npm ci

      - name: Run backend tests
        run: |
          cd backend
          npm test
        env:
          NODE_ENV: test

      - name: Run frontend tests
        run: |
          cd frontend
          npm test

      - name: Build frontend
        run: |
          cd frontend
          npm run build

  deploy-frontend:
    needs: test
    runs-on: ubuntu-latest
    # Allow manual dispatch OR opt-in deploy on push to main with commit message flag
    if: (
      github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_frontend == 'true' && github.ref == 'refs/heads/main'
    ) || (
      github.event_name == 'push' && github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[deploy-frontend]')
    )
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_backend == 'true' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-backend:
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_backend == 'true' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to DigitalOcean
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          script: |
            set -e
            cd /opt/nfe-system
            echo "Fetching latest code..."
            git fetch origin
            git reset --hard origin/main
            echo "Rebuilding backend image..."
            docker-compose build --pull
            docker-compose up -d --remove-orphans
            echo "Cleaning up..."
            docker system prune -f

      - name: Health Check
        run: |
          sleep 30
          curl -f ${{ secrets.BACKEND_URL }}/health || exit 1

  notify:
    needs: [deploy-frontend, deploy-backend]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()