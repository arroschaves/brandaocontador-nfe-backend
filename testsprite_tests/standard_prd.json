{
  "meta": {
    "project": "Sistema NFe Brandão Contador",
    "date": "2025-10-17",
    "prepared_by": "Generated by TestSprite"
  },
  "product_overview": "Sistema NFe Brandão Contador é uma plataforma web robusta para emissão, gerenciamento e controle completo de Notas Fiscais Eletrônicas (NFe), desenvolvida para profissionais contábeis. A solução integra um frontend moderno em React com backend em Node.js, oferecendo autenticação segura, administração do sistema e monitoramento avançado, assegurando processos confiáveis e conformidade fiscal.",
  "core_goals": [
    "Permitir emissão segura e correta de NFes com validação rigorosa de certificados digitais.",
    "Fornecer histórico detalhado e consulta das NFes emitidas pelos usuários autenticados.",
    "Garantir autenticação segura baseada em JWT para controlar o acesso ao sistema.",
    "Disponibilizar endpoints administrativos para gerenciamento de usuários, limpeza e estatísticas do banco de dados.",
    "Assegurar alta disponibilidade, monitoramento contínuo da saúde do sistema e suas dependências.",
    "Facilitar deploys automáticos no frontend via Vercel e deploys manuais no backend via scripts de atualização no servidor DigitalOcean.",
    "Manter segurança na comunicação via SSL Full strict, políticas de CORS e cache otimizado via Cloudflare."
  ],
  "key_features": [
    "APIs Health para monitoramento básico e detalhado do estado do sistema com respostas rápidas e confiáveis.",
    "API de autenticação com suporte a registro de novos usuários, login e emissão/refresh de tokens JWT.",
    "APIs completas para emissão, validação e consulta de Notas Fiscais Eletrônicas com requisitos de certificado digital válido.",
    "APIs administrativas para listagem de usuários, limpeza do banco de dados e obtenção de estatísticas do sistema, com logs apropriados.",
    "Frontend desenvolvido em React + TypeScript + Vite com layout responsivo e gerenciamento de rotas protegidas.",
    "Backend construído em Node.js e Express com banco de dados MongoDB/SQLite e integrações para NFe e certificação digital.",
    "Deploy integrado e automatizado no frontend via Vercel e deploy backend via scripts em DigitalOcean.",
    "Configuração robusta de DNS, CDN e SSL via Cloudflare com otimizações para performance e segurança."
  ],
  "user_flow_summary": [
    "Usuário acessa a plataforma via URL oficial e pode se registrar fornecendo nome, email e senha.",
    "Usuário realiza login com email e senha para autenticação JWT e acesso protegido ao sistema.",
    "Usuário emite NFes submetendo dados com certificado digital válido; sistema valida e processa a emissão.",
    "Usuário consulta o histórico completo das NFes previamente emitidas através do dashboard.",
    "Administrador acessa sua área para listar usuários ativos, limpar o banco e consultar estatísticas do sistema.",
    "Equipe de DevOps realiza deploy automático do frontend pelo Vercel após push no branch principal.",
    "Equipe de DevOps realiza deploy manual do backend via SSH e scripts no servidor DigitalOcean, monitorando logs e saúde do sistema."
  ],
  "validation_criteria": [
    "APIs de healthcheck respondem com status HTTP 200 e dados válidos incluindo estado do sistema e memória.",
    "Autenticação rejeita logins inválidos e emite tokens JWT válidos para credenciais corretas.",
    "Emissão de NFe falha se o certificado digital estiver ausente, inválido ou expirado.",
    "APIs administrativas retornam dados corretos, limpam banco e geram logs audíveis durante as operações.",
    "Frontend deve estar disponível na URL personalizada com consumo apropriado da API backend via variáveis de ambiente configuradas.",
    "Deploys do frontend e backend completam sem erros, aplicações iniciam corretamente via PM2 e possuem logs acessíveis.",
    "Configurações de SSL, CORS e DNS devem estar ativas e válidas conforme testes de segurança, integridade e performance."
  ],
  "code_summary": {
    "tech_stack": [
      "TypeScript",
      "React (Vite)",
      "Tailwind CSS",
      "Axios",
      "React Router",
      "Node.js",
      "Express",
      "MongoDB (Mongoose)",
      "mongodb-memory-server",
      "JWT (jsonwebtoken)",
      "bcryptjs",
      "Multer",
      "Nodemailer",
      "xml2js",
      "xml-crypto",
      "node-forge"
    ],
    "features": [
      {
        "name": "Frontend App Entrypoint",
        "description": "Boot do app, rotas protegidas, layout principal e banner de status do backend.",
        "files": [
          "frontend/src/main.tsx",
          "frontend/src/App.tsx",
          "frontend/src/components/Layout.tsx",
          "frontend/src/components/ProtectedRoute.tsx"
        ]
      },
      {
        "name": "Auth Context & Hooks",
        "description": "Gerencia autenticação, token em localStorage, refresh e permissões.",
        "files": [
          "frontend/src/contexts/AuthContext.tsx",
          "frontend/src/hooks/useAuth.ts"
        ]
      },
      {
        "name": "API Client & Config",
        "description": "Cliente HTTP com Axios, baseURL por ambiente e serviços para auth/NFe/config.",
        "files": [
          "frontend/src/services/api.ts",
          "frontend/src/config/api.ts"
        ]
      },
      {
        "name": "UI & Layout Components",
        "description": "Componentes de UI e layout (inclui Sidebar e utilitários visuais).",
        "files": [
          "frontend/src/components/layout/Sidebar.tsx",
          "frontend/src/components/ui/*"
        ]
      },
      {
        "name": "Pages – Clientes",
        "description": "Listagem, cadastro e edição de clientes com endereço e Inscrição Estadual.",
        "files": [
          "frontend/src/pages/Clientes.tsx"
        ]
      },
      {
        "name": "Pages – Produtos",
        "description": "Cadastro/edição de produtos com campos fiscais (CST, Tipo de Tributação, Origem).",
        "files": [
          "frontend/src/pages/Produtos.tsx"
        ]
      },
      {
        "name": "Pages – Configurações",
        "description": "Configurações de NFe e upload de certificado digital (label aponta para input).",
        "files": [
          "frontend/src/pages/Configuracoes.tsx"
        ]
      },
      {
        "name": "Pages – Emissão/Consulta NFe",
        "description": "Fluxos de emissão, validação e consulta de NFe.",
        "files": [
          "frontend/src/pages/EmitirNFe.tsx",
          "frontend/src/pages/ConsultarNFe.tsx",
          "frontend/src/hooks/useNFe.ts"
        ]
      },
      {
        "name": "Pages – Dashboard & Cadastro",
        "description": "Páginas auxiliares de overview e cadastro de empresa.",
        "files": [
          "frontend/src/pages/Dashboard.tsx",
          "frontend/src/pages/Cadastro.tsx"
        ]
      },
      {
        "name": "Frontend Utils",
        "description": "Helpers gerais e utilitários de ambiente.",
        "files": [
          "frontend/src/utils/index.ts",
          "frontend/src/lib/utils.ts"
        ]
      },
      {
        "name": "Backend – Servidor Express (Real)",
        "description": "Servidor completo com autenticação real, semeadura de usuários, endpoints NFe/Clientes/Produtos/Config.",
        "files": [
          "backend/app-real.js",
          "backend/middleware/auth-real.js",
          "backend/services/auth-service.js",
          "backend/models/Usuario.js",
          "backend/models/Cliente.js",
          "backend/models/Produto.js",
          "backend/models/Configuracao.js",
          "backend/config/database.js"
        ]
      },
      {
        "name": "Backend – Servidor Express (Simples)",
        "description": "Servidor alternativo com banco JSON e autenticação simplificada.",
        "files": [
          "backend/app-simples.js",
          "backend/middleware/auth-simples.js",
          "backend/config/database-simples.js",
          "backend/data/database.json"
        ]
      },
      {
        "name": "Backend – NFe Services",
        "description": "Serviços de NFe: validação, emissão, histórico, download e integração certificada.",
        "files": [
          "backend/services/nfe-service.js",
          "backend/services/validation-service.js",
          "backend/services/certificate-service.js"
        ]
      },
      {
        "name": "Backend – Admin & Health",
        "description": "Endpoints administrativos, limpeza de banco, health check e versão.",
        "files": [
          "backend/app-real.js",
          "backend/scripts/seed-users.js"
        ]
      },
      {
        "name": "Testsprite – Test Plan & Cases",
        "description": "Plano de testes e casos (login, admin usuários, frontend acesso, rotas inválidas).",
        "files": [
          "testsprite_tests/testsprite_frontend_test_plan.json",
          "testsprite_tests/TC004_auth_login_should_accept_valid_credentials_and_return_jwt_token.py",
          "testsprite_tests/TC006_auth_register_should_reject_invalid_data_and_return_400.py",
          "testsprite_tests/TC010_admin_usuarios_should_return_user_list_with_status_200.py",
          "testsprite_tests/TC012_Admin_Get_System_Statistics_API_Success.py",
          "testsprite_tests/TC013_Frontend_Access_and_API_Consumption.py",
          "testsprite_tests/TC017_Error_Handling_on_Backend_with_Invalid_API_Routes.py"
        ]
      }
    ]
  }
}
